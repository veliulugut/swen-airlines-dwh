# Swen Airlines DWH - Otomatik Sistem
# Gerçek Zamanlı Veri Ambarı ve Analitik Dashboard

version: '3.8'

services:
  # PostgreSQL Database (swen_dwh + airflow_db)
  postgres:
    image: postgres:13
    environment:
      - POSTGRES_USER=admin
      - POSTGRES_PASSWORD=admin
      - POSTGRES_MULTIPLE_DATABASES=swen_dwh,airflow_db
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U admin -d swen_dwh"]
      interval: 5s
      timeout: 5s
      retries: 5
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./sql/ddl:/docker-entrypoint-initdb.d
      - ./scripts/create_multiple_dbs.sh:/docker-entrypoint-initdb.d/00_create_multiple_dbs.sh
    networks:
      - swen_network
    restart: unless-stopped

  # Kafka Services - Confluent Platform (Daha Stabil)
  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.0
    hostname: zookeeper
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    healthcheck:
      test: ["CMD", "bash", "-c", "echo 'ruok' | nc localhost 2181"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - swen_network

  kafka:
    image: confluentinc/cp-kafka:7.4.0
    hostname: kafka
    container_name: kafka
    depends_on:
      zookeeper:
        condition: service_healthy
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:29092,PLAINTEXT_HOST://0.0.0.0:9092
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'true'
      KAFKA_NUM_PARTITIONS: 1
      KAFKA_DEFAULT_REPLICATION_FACTOR: 1
    ports:
      - "9092:9092"
      - "29092:29092"
    healthcheck:
      test: ["CMD", "kafka-broker-api-versions", "--bootstrap-server", "localhost:9092"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - swen_network

  # Real-time Data Producer (7/24 çalışır)
  kafka-producer:
    build: .
    command: python data_gen/producer.py
    depends_on:
      kafka:
        condition: service_healthy
      zookeeper:
        condition: service_healthy
    environment:
      - KAFKA_BOOTSTRAP_SERVERS=kafka:29092
    volumes:
      - .:/app
    working_dir: /app
    networks:
      - swen_network
    restart: unless-stopped

  # Initial Data Loading (bir kez çalışır)
  data-init:
    build: .
    command: >
      bash -c "
        echo '🔄 Starting data initialization...' &&
        python /app/scripts/load_sample_data.py &&
        python /app/scripts/run_initial_procedures.py &&
        echo '✅ Data initialization completed!'
      "
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      - PYTHONPATH=/app
    volumes:
      - .:/app
    working_dir: /app
    networks:
      - swen_network
    restart: "no"

  # Airflow Webserver (http://localhost:8080)
  airflow-webserver:
    build: .
    command: >
      bash -c "
        echo '🔄 Setting up Airflow...' &&
        airflow db init &&
        python /opt/airflow/scripts/setup_airflow_connections.py &&
        airflow users create --username admin --firstname Admin --lastname User --role Admin --email admin@swen.com --password admin &&
        echo '✅ Airflow setup complete!' &&
        airflow webserver --port 8080
      "
    environment:
      - AIRFLOW__CORE__EXECUTOR=LocalExecutor
      - AIRFLOW__DATABASE__SQL_ALCHEMY_CONN=postgresql+psycopg2://admin:admin@postgres:5432/airflow_db
      - AIRFLOW__CORE__FERNET_KEY=ZmDfcTF7_60GrrY167zsiPd67pEvs0aGOv2oasOM1Pg=
      - AIRFLOW__WEBSERVER__SECRET_KEY=temporary_secret_key
      - AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION=false
      - AIRFLOW__CORE__LOAD_EXAMPLES=false
    ports:
      - "8080:8080"
    depends_on:
      data-init:
        condition: service_completed_successfully
    volumes:
      - ./dags:/opt/airflow/dags
      - ./scripts:/opt/airflow/scripts
      - ./consumers:/opt/airflow/consumers
      - ./data_gen:/opt/airflow/data_gen
    working_dir: /opt/airflow
    networks:
      - swen_network
    restart: unless-stopped

  # Airflow Scheduler (DAG execution)
  airflow-scheduler:
    build: .
    command: >
      bash -c "
        echo '⏰ Starting Airflow scheduler...' &&
        python /opt/airflow/scripts/activate_dags.py &&
        airflow scheduler
      "
    environment:
      - AIRFLOW__CORE__EXECUTOR=LocalExecutor
      - AIRFLOW__DATABASE__SQL_ALCHEMY_CONN=postgresql+psycopg2://admin:admin@postgres:5432/airflow_db
      - AIRFLOW__CORE__FERNET_KEY=ZmDfcTF7_60GrrY167zsiPd67pEvs0aGOv2oasOM1Pg=
      - AIRFLOW__WEBSERVER__SECRET_KEY=temporary_secret_key
      - AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION=false
      - AIRFLOW__CORE__LOAD_EXAMPLES=false
    depends_on:
      airflow-webserver:
        condition: service_started
    volumes:
      - ./dags:/opt/airflow/dags
      - ./scripts:/opt/airflow/scripts
      - ./consumers:/opt/airflow/consumers
      - ./data_gen:/opt/airflow/data_gen
    working_dir: /opt/airflow
    networks:
      - swen_network
    restart: unless-stopped

  # Analytics Dashboard (http://localhost:8501)
  streamlit-dashboard:
    build: .
    command: >
      bash -c "
        echo '🚀 Starting Analytics Dashboard...' &&
        streamlit run dashboard/app.py --server.port 8501 --server.address 0.0.0.0 --theme.base=dark
      "
    environment:
      - PYTHONPATH=/app
    ports:
      - "8501:8501"
    depends_on:
      postgres:
        condition: service_healthy
    volumes:
      - .:/app
    working_dir: /app
    networks:
      - swen_network
    restart: unless-stopped

networks:
  swen_network:
    driver: bridge

volumes:
  postgres_data:
